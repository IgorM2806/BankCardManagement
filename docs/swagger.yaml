openapi: '3.0.0'
info:
  title: Bank Administration API
  version: '1.0.0'
  description: |
    API for administrative operations related to managing bank cards, users, transfers, and balances.

servers:
  - url: 'http://localhost:8080'

security:
  - bearerAuth: []

paths:
  # ----- Карточки -----
  "/api/cards/balances/{userId}": # Балансы карточек пользователя
    get:
      tags:
        - Card Balances
      operationId: getCardsWithBalancesForUser
      summary: Get all cards with balances for a specific user
      description: Retrieves detailed information about cards and their balances associated with a particular user.
      parameters:
        - name: userId
          in: path
          required: true
          description: ID of the user
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful response containing list of card balances
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CardBalanceDto"
        '404':
          description: User not found
          content:
            text/plain:
              schema:
                type: string
      security:
        - bearerAuth: []

  "/api/cards/{cardId}/block": # Заблокировать карту
    post:
      tags:
        - Card Blocking
      operationId: blockCard
      summary: Block a specific card
      description: Blocks a card by its unique identifier.
      parameters:
        - name: cardId
          in: path
          required: true
          description: ID of the card to block
          schema:
            type: integer
            format: int64
        - name: X-User-ID
          in: header
          required: true
          description: ID of the authenticated user performing the action
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Card blocked successfully
        '403':
          description: Access denied
          content:
            text/plain:
              schema:
                type: string
      security:
        - bearerAuth: []

  "/api/cards/change-deposit/{cardId}": # Пополнение баланса карты
    put:
      tags:
        - Balance Operations
      operationId: depositCardBalance
      summary: Deposit money into a card's balance
      description: Increases the balance of a card by the requested amount.
      parameters:
        - name: cardId
          in: path
          required: true
          description: ID of the card to which funds should be deposited
          schema:
            type: integer
            format: int64
        - name: amountChange
          in: query
          required: true
          description: Amount to deposit
          schema:
            type: number
            format: decimal
      responses:
        '204':
          description: Balance changed successfully
        '404':
          description: Card not found
          content:
            text/plain:
              schema:
                type: string
      security:
        - bearerAuth: []

  "/api/cards/withdraw/{cardId}": # Снятие денег с карты
    put:
      tags:
        - Balance Operations
      operationId: withdrawFromCard
      summary: Withdraw money from a card's balance
      description: Decreases the balance of a card by the requested amount.
      parameters:
        - name: cardId
          in: path
          required: true
          description: ID of the card from which funds should be withdrawn
          schema:
            type: integer
            format: int64
        - name: amountWithdraw
          in: query
          required: true
          description: Amount to withdraw
          schema:
            type: number
            format: decimal
      responses:
        '204':
          description: Balance changed successfully
        '404':
          description: Card not found
          content:
            text/plain:
              schema:
                type: string
        '402':
          description: Insufficient funds
          content:
            text/plain:
              schema:
                type: string
      security:
        - bearerAuth: []

  # ----- Управление пользователями -----
  "/api/users/delete/{userId}": # Удаление пользователя
    delete:
      tags:
        - User Management
      operationId: deleteUser
      summary: Delete a user by their ID
      description: Permanently removes a user from the system.
      parameters:
        - name: userId
          in: path
          required: true
          description: ID of the user to delete
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: User deleted successfully
        '404':
          description: User not found
          content:
            text/plain:
              schema:
                type: string
      security:
        - bearerAuth: []

  "/admin/users/add": # Регистрация нового пользователя
    post:
      tags:
        - User Management
      operationId: createUser
      summary: Register a new user
      description: Registers a new user in the system.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateUserDTO"
      responses:
        '200':
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Users"
        '409':
          description: User already exists
          content:
            text/plain:
              schema:
                type: string
      security:
        - bearerAuth: []

  "/admin/users/password/update": # Обновление пароля пользователя
    post:
      tags:
        - User Management
      operationId: updateUserPasswordHash
      summary: Update a user's password
      description: Changes the password for a user.
      parameters:
        - name: userId
          in: query
          required: true
          description: ID of the user whose password needs updating
          schema:
            type: integer
            format: int64
        - name: password
          in: query
          required: true
          description: New password for the user
          schema:
            type: string
      responses:
        '200':
          description: Password updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Users"
        '500':
          description: Internal error during password update
      security:
        - bearerAuth: []

  # ----- Управление картами -----
  "/admin/cards/{userId}": # Добавление карты пользователю
    post:
      tags:
        - Card Management
      operationId: addCardToUser
      summary: Add a new card to a user
      description: Adds a new card to a user's account.
      parameters:
        - name: userId
          in: path
          required: true
          description: ID of the user receiving the new card
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateCardDTO"
      responses:
        '200':
          description: Card added successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Cards"
        '409':
          description: Card number conflict
          content:
            text/plain:
              schema:
                type: string
      security:
        - bearerAuth: []

  "/api/cards/delete/{cardId}": # Удаление банковской карты
    delete:
      tags:
        - Card Management
      operationId: deleteCard
      summary: Delete a card by its ID
      description: Removes a card from the system permanently.
      parameters:
        - name: cardId
          in: path
          required: true
          description: ID of the card to delete
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: Card deleted successfully
        '404':
          description: Card not found
          content:
            text/plain:
              schema:
                type: string
      security:
        - bearerAuth: []

  # ----- Транзакции между картами -----
  "/api/v1/transferCards/user/{userId}": # Получить карточки пользователя
    get:
      tags:
        - Card Transfers
      operationId: getUserCards
      summary: Retrieve all cards owned by a user
      description: Fetches a list of cards belonging to a specific user.
      parameters:
        - name: userId
          in: path
          required: true
          description: ID of the user
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful response containing list of cards
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Cards"
        '404':
          description: User not found
          content:
            text/plain:
              schema:
                type: string
      security:
        - bearerAuth: []

  "/api/v1/transferCards/transfer": # Перевод денег между картами
    post:
      tags:
        - Card Transfers
      operationId: performTransfer
      summary: Perform a transfer between two cards
      description: Transfers money from one card to another within the same user account.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TransferData"
      responses:
        '200':
          description: Transfer successful
        '404':
          description: One or both cards not found
          content:
            text/plain:
              schema:
                type: string
        '402':
          description: Insufficient funds
          content:
            text/plain:
              schema:
                type: string
      security:
        - bearerAuth: []

components:
  schemas:
    CreateCardDTO:
      type: object
      properties:
        cardNumber:
          type: string
          description: Card number
        expirationDate:
          type: string
          format: date
          description: Expiration date of the card
        status:
          type: string
          description: Status of the card
        balance:
          type: number
          format: decimal
          description: Balance on the card
          
    CardBalanceDto:
      type: object
      properties:
        cardId:
          type: integer
          format: int64
          description: Unique identifier of the card
        balance:
          type: number
          format: decimal
          description: Current balance of the card
        currency:
          type: string
          description: Currency code of the balance

    Cards:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: Unique identifier of the card
        cardNumber:
          type: string
          description: Card number
        expiryDate:
          type: string
          format: date
          description: Expiry date of the card
        status:
          type: string
          description: Status of the card (ACTIVE/BLOCKED)

    TransferData:
      type: object
      required:
        - userId
        - sourceCard
        - targetCard
        - amount
      properties:
        userId:
          type: integer
          format: int64
          description: ID of the user initiating the transfer
        sourceCard:
          type: integer
          format: int64
          description: Source card ID
        targetCard:
          type: integer
          format: int64
          description: Target card ID
        amount:
          type: number
          format: decimal
          description: Amount to transfer

    CreateUserDTO:
      type: object
      required:
        - firstName
        - surname
        - patronymic
        - role
        - passwordHash
      properties:
        firstName:
          type: string
          description: First name of the user
        surname:
          type: string
          description: Last name of the user
        patronymic:
          type: string
          description: Patronymic of the user
        role:
          type: string
          description: Role assigned to the user
        passwordHash:
          type: string
          description: Hashed password of the user

    Users:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: Unique identifier of the user
        firstName:
          type: string
          description: First name of the user
        surname:
          type: string
          description: Last name of the user
        patronymic:
          type: string
          description: Patronymic of the user
        role:
          type: string
          description: Role assigned to the user
        passwordHash:
          type: string
          description: Hashed password of the user

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT